---
- name: setup arch based kube head nodes
  hosts: head
  gather_facts: true
  vars:
    ci: false
    cluster_podcidr: 10.244.0.0/16
  tasks:
    - name: install package(s)
      pacman:
        state: latest
        update_cache: true
        name:
          - prometheus
          - alertmanager
      become: true
      when: latest|bool

    - name: restart systemd services
      systemd: name={{ item }} enabled=true state=restarted
      with_items:
        - prometheus
        - alertmanager
      become: true
      when: not ci|bool

    - name: make sure /var/lib/etcd is empty
      file: path=/var/lib/etcd state=absent
      become: true

    - name: upload the kube tools to head nodes
      copy:
        src:  "{{ lookup('env', 'GOPATH') }}/bin/{{ item }}"
        dest: "{{ lookup('env', 'GOPATH') }}/bin/{{ item }}"
        mode: 0755
      with_items:
        - kubeadm
        - kubelet

    - name: check if the head node is already initialized
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet
      changed_when: false

    - name: initialize the cluster head node!
      command: |
        kubeadm init --pod-network-cidr "{{ cluster_podcidr }}"
          --apiserver-advertise-address "{{ cluster_node_ip }}"
      become: true
      environment:
        GOROOT: "{{ lookup('env', 'GOROOT') }}"
        GOPATH: "{{ lookup('env', 'GOPATH') }}"
        PATH: "{{ lookup('env', 'GOPATH') }}/bin:{{ lookup('env', 'GOROOT') }}/bin:/usr/bin:/bin"
      register: kubeadm
      when: not ci|bool and not kubelet.stat.exists|bool

    - name: get API token and API server
      set_fact:
        cluster_apiserver: "{{kubeadm.stdout|regex_search(regexp, '\\1')|list|first}}"
        cluster_token: "{{kubeadm.stdout|regex_search(regexp, '\\2')|list|first}}"
      vars:
        regexp: 'kubeadm join (\S+) --token (\S+) '
      changed_when: false
      when: not ci|bool and kubeadm.changed|bool

    - name: get CA certificate hash
      set_fact:
        cluster_cert_hash: "{{kubeadm.stdout|regex_search(regexp, '\\1')|list|first}}"
      vars:
        regexp: '\s+--discovery-token-ca-cert-hash (\S+)'
      changed_when: false
      when: not ci|bool and kubeadm.changed|bool

    - name: fetch the admin.conf for kubectl to work
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: "{{ lookup('env', 'HOME') }}/.kube/config"
        flat: true
      become: yes
      changed_when: false
      when: not ci|bool and kubeadm.changed|bool
